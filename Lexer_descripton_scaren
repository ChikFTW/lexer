%scaner_name LexerScaner
%codes_type lexem_code

%codes
Id

%ident_name Id
%token_fields
"usigned __int128 int_val; __float128 float_val;"
%class_members
"__int128 integer_value;
__int128 fractional_part;
size_t exponent;
ssize_t exp_sign;
size_t frac_part_num_digits;
bool is_float;"
%codes
r0,     r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11,
r12,    r13, r14, r15, r16, r17, r18, r19, r20, r21,
r22,    r23, r24, r25, r26, r27, r28, r29, r30, r31, sp, bp
f0,     f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11,
f12,    f13, f14, f15, f16, f17, f18, f19, f20, f21,
f22,    f23, f24, f25, f26, f27, f28, f29, f30, f31
addi,   addf,   subi,      subf,
muliu,  mulis,  mulf,
diviu,  divis,  divf,
modiu,  modis,  divmodiu,  divmodis,
add,    or,     xor,       not,
andn,   orn, xorn,
lshift, rshift, cmp, jmp, jmpr, jmpn,
jmpnr,  jmpz, jmpzr,
jmpp,   jmppr, jmpnz, jmpnzr, jmpge, jmpger,
jmple,  jmpler, call, callr, trap, reti,
mov,    movu, movs,
mov8u,  mov8s, mov16u, mov16s,
mov32u, mov32s, mov64u, mov64s,
round

%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}

%impl_additions "size_t digit2int(char32_t) {}"

%keywords

%delimiters
"=" : Equal, "+" : Plus, "-" : Minus, "*" : Mul, "/" : Div, "%": Mod,"<": LT, ">":GT,
"<=": LEQ, ">=":GEQ, "!=":Nequal,"/.": FDiv, "||": Lor,"!||": LNor, "!":LNot, "&&": LAnd,
"!&&": LNAnd, "^^": LXor,"!^^": LNXor,"^":BXor,"~^":BNXor,"|":Bor, "~|":BNor,"&":BAnd,
"~&":BNAnd, "<<":LShift,">>":RShift,"~":BNot, "**":Pow, "**.":FPow,":=":Assign,
"{":Openif_block,"}":endif_block, "(":Open_begin_block, ")":Close_begin_block,"#":Dim_size, "?":cond_op,";":Semicolon, ",":Comma,
"::":after_label,"[":Open_elem_mass,"]":Close_elem_mass,":":Colon

%strings

%numbers "[:digits:]('?[:digits:])*(.[:digits:]('?[:digits:]*))
?(((S|s)|(D|d)|(E|e)|(Q|q))(+|-)?[:digits:]('?[:digits])*)?|
0o[:digits:]('?[:odigits:])*|0(b|B)[:bdigits:]('?[:bdigits:])*|
0(x|X)[:xdigits:]('?[:xdigits:])*"

%action addHexDigit "val_ = (val_ << 4) + digitToInt(ch);"
%action addDecDigit "val_ = val_ * 10 + digitToInt(ch);"
%action addBinDigit "val_ = (val_ << 1) + digitToInt(ch);"
%action addOctDigit "val_ = (val_ << 3) + digitToInt(ch);"


digit2int(char32_t c)
в загаловочный build float -> 128
