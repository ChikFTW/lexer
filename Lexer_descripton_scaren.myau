%scaner_name LexerScaner
%codes_type lexem_code

%ident_name Id

%token_fields
"unsigned __int128 int_val;
__float128 float_val;"

%class_members
"__int128 integer_part;
__int128 fractional_part;
size_t exponent;
ssize_t exp_sign;
size_t frac_part_num_digits;
bool is_float;
char32_t precision;"

%codes
  sp,     bp,
  r0,     r1,     r2,       r3,       r4,     r5,
  r6,     r7,     r8,       r9,       r10,    r11,
  r12,    r13,    r14,      r15,      r16,    r17,
  r18,    r19,    r20,      r21,      r22,    r23,
  r24,    r25,    r26,      r27,      r28,    r29,
  r30,    r31,
  f0,     f1,     f2,       f3,       f4,     f5,
  f6,     f7,     f8,       f9,       f10,    f11,
  f12,    f13,    f14,      f15,      f16,    f17,
  f18,    f19,    f20,      f21,      f22,    f23,
  f24,    f25,    f26,      f27,      f28,    f29,
  f30,    f31,
  addi,   addf,   subi,     subf,
  muliu,  mulis,  mulf,
  diviu,  divis,  divf,
  modiu,  modis,  divmodiu, divmodis,
  add,    or,     xor,      not,
  andn,   orn,    xorn,
  lshift, rshift, cmp,      jmp,      jmpr,   jmpn,
  jmpnr,  jmpz,   jmpzr,
  jmpp,   jmppr,  jmpnz,    jmpnzr,   jmpge,  jmpger,
  jmple,  jmpler, call,     callr,    trap,   reti,
  mov,    movu,   movs,
  mov8u,  mov8s,  mov16u,   mov16s,
  mov32u, mov32s, mov64u,   mov64s,
  round,
  Equal, Semicolon,  Comma,
  Plus, Minus, Mul, Div, Mod,
  Open_func, Close_func,
  Open_round, Close_round,
  Open_square, Close_square,
  Integer, Single, Double, Extended, Quatro

%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}

%impl_additions "
  #include <quadmath>

  size_t digit2int(char32_t ch) {
    size_t v = ch - U'0';
    return (v<=9)? v : (v&0b1101'1111) - 7;
  }
  __int128 setexp(char32_t ch) {
    return (ch == '-')? -1 : 1;
  }

  __float128 lexem_code: build_float(){
    return integer_part + fractional_part*powq(10,-frac_part_num_digits)+exp_sign*exponent;
  }

  lexem_code precision2code(char32_t ch){
    switch (ch) {
      case: 'S':
        return Single;
        break;
      case: 'D':
        return Double;
        break;
      case: 'E':
        return Extended;
        break;
      case: 'Q':
        return Quatro;
        break;
      default:
        return Single;
        break;
    }
  }
"

%keywords
  "addi" : addi,          "addf" : addf,      "subi" : subi,
  "subf" : subf,
  "muliu" : muliu,        "mulis" : mulis,    "mulf" : mulf,
  "diviu" : diviu,        "divis" : divis,    "divf" : divf,
  "modiu" : modiu,        "modis" : modis,    "divmodiu" : divmodiu,
  "divmodis" : divmodis,
  "add" : add,            "or" : or,          "xor" : xor,
  "not" : not,
  "andn" : andn,          "orn" : orn,        "xorn" : xorn,
  "lshift" : lshift,      "rshift" : rshift,  "cmp" : cmp,
  "jmp" : jmp,            "jmpr" : jmpr,      "jmpn" : jmpn,
  "jmpnr" : jmpnr,        "jmpz" : jmpz,      "jmpzr" : jmpzr,
  "jmpp" : jmpp,          "jmppr" : jmppr,    "jmpnz" : jmpnz,
  "jmpnzr" : jmpnzr,      "jmpge" : jmpge,    "jmpger" : jmpger,
  "jmple" : jmple,        "jmpler" : jmpler,
  "call" : call,          "callr" : callr,    "trap" : trap,
  "reti" : reti,
  "mov" : mov,            "movu" : movu,      "movs" : movs,
  "mov8u" : mov8u,        "mov8s" : mov8s,    "mov16u" : mov16u,
  "mov16s" : mov16s,
  "mov32u" : mov32u,      "mov32s" : mov32s,  "mov64u" : mov64u,
  "mov64s" : mov64s,
  "round" : round

%delimiters
  "=" : Equal, ";" : Semicolon, "," : Comma,
  "+" : Plus, "-" : Minus, "*" : Mul, "/" : Div, "%": Mod,
  "^" : xor, "|" : or, "&" : add, "~" : not,
  "<<" : lshift, ">>" : rshift,
  "{":Open_func,    "}":Close_func,
  "(":Open_round,   ")":Close_round,
  "[":Open_square,  "]":Close_square

%numbers "int_val = 0;
          float_val = 0;
          is_float = false;
          integer_part = 0;
          fractional_part = 0;
          exponent = 1;
          exp_sign = 1;
          frac_part_num_digits = 0;
          token.code = Integer;"
          :
          "
          if(is_float){
            token.float_val=build_float();
            token.code = precision2code(precision);
          } else {
            token.int_val=integer_part;
            token.code = Integer;
          }"	
          %action addHexDigit "integer_part = (integer_part << 4) + digit2int(ch);"
          %action addDecDigit "integer_part = integer_part * 10 + digit2int(ch);"
          %action addBinDigit "integer_part = (integer_part << 1) + digit2int(ch);"
          %action addOctDigit "integer_part = (integer_part << 3) + digit2int(ch);"
          %action setIsFloat "is_float = true;"
          %action addDigitToDegree "exponent = exponent * 10 + digit2int(ch);"
          %action addDecToFrac "fractional_part = fractional_part / 10 + digit2int(ch); frac_part_num_digits += 1;"
          %action setExpSign "exp_sign = setexp(ch);"
          %action setPrecision "precision = ch; is_float = true;"
	                                
{[:digits:]$addDecDigit('?[:digits:]$addDecDigit)*(.$setIsFloat[:digits:]$addDecToFrac('?[:digits:]$addDecToFrac*))
?(((S|s)|(D|d)|(E|e)|(Q|q))$setPrecision+|-$setExpSign?[:digits:]$addDigitToDegree('?[:digits:]$addDigitToDegree)*)?|
0o[:odigits:]$addOctDigit('?[:odigits:]$addOctDigit)*|
0(b|B)[:bdigits:]$addBinDigit('?[:bdigits:]$addBinDigit)*|
0(x|X)[:xdigits:]$addHexDigit('?[:xdigits:]$addHexDigit)*}